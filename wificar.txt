#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <ESP8266WebServer.h>
#include <ESP8266mDNS.h>


#define MOTOR_PIN_1 D5
#define MOTOR_PIN_2 D6
#define MOTOR_PIN_3 D3
#define MOTOR_PIN_4 D4
#define MOTOR_PIN_5 D1
#define MOTOR_PIN_6 D2

const char* ssid = "lawnmover";
const char* password = "12345678";

ESP8266WebServer server(80);

String rowDiv = "    <div class=\"row\" style=\"padding-bottom:1em\">\n";
String endDiv = "    </div>\n";

// Buttons are using the bootstrap grid for sizing - http://getbootstrap.com/css/#grid
String generateButton(String colSize, String id, String text, String onTouchStart, String onTouchStop) {

  return  "<div class=\"" + colSize + "\" style=\"text-align: center\">\n" +
          "    <button id=\"" + id + "\" type=\"button\" class=\"btn btn-default\" style=\"width: 100%\" ontouchstart='makeAjaxCall(\"" + onTouchStart + "\")' ontouchend='makeAjaxCall(\"" + onTouchStop + "\")'>" + text + "</button>\n" +
          "</div>\n";
}

void handleRoot() {
  String website = "<!DOCTYPE html>\n";
  website = website + "<html>\n";
  website = website + "  <head>\n";
  website = website + "    <meta charset=\"utf-8\">\n";
  website = website + "    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n";
  website = website + "    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n";
  website = website + "    <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\">\n";
  website = website + "  </head>\n";
  website = website + "  <body>\n";
  website = website + "    <div class=\"container-fluid\">\n";
  // ------------------------- Power Controls --------------------------
  website = website + rowDiv;
  website = website + "<div class=\"col-xs-8\" >\n";
  website = website + endDiv;
  website = website + generateButton("col-xs-4", "drive","Drive", "forward", "driveStop");
  website = website + endDiv;

  website = website + rowDiv;
  website = website + generateButton("col-xs-4", "left","Left", "left", "steerStop");
  website = website + generateButton("col-xs-4", "right","Right", "right", "steerStop");
  website = website + "<div class=\"col-xs-4\" >\n";
  website = website + endDiv;
  website = website + endDiv;

  website = website + rowDiv;
  website = website + "<div class=\"col-xs-8\" >\n";
  website = website + endDiv;
  website = website + generateButton("col-xs-4", "back","Back", "back", "driveStop");
  website = website + endDiv;

  website = website + rowDiv;
  website = website + generateButton("col-xs-4", "on","ON", "on","hi");
  website = website + generateButton("col-xs-4", "off","OFF", "off","hi");
  website = website + "<div class=\"col-xs-4\" >\n";
  website = website + endDiv;
  website = website + endDiv;
  
 /* website = website + rowDiv;
  website = website + generateButton("col-xs-4", "Automation on","Automation ON", "Automation on","hi");
  website = website + generateButton("col-xs-4", "Automation off","Automation OFF", "Automation off","hi");
  website = website + "<div class=\"col-xs-4\" >\n";
  website = website + endDiv;
  website = website + endDiv;*/

  // ------------------------- Channel Controls --------------------------

  website = website + endDiv;
  website = website + "    <script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.12.4/jquery.min.js\"></script>\n";
  website = website + "    <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"></script>\n";
  website = website + "    <script> function makeAjaxCall(url){$.ajax({\"url\": url})}</script>\n";
  website = website + "  </body>\n";
  website = website + "</html>\n";

  server.send(200, "text/html", website);
}

void handleNotFound(){
  String message = "File Not Found\n\n";
  message += "URI: ";
  message += server.uri();
  message += "\nMethod: ";
  message += (server.method() == HTTP_GET)?"GET":"POST";
  message += "\nArguments: ";
  message += server.args();
  message += "\n";
  for (uint8_t i=0; i<server.args(); i++){
    message += " " + server.argName(i) + ": " + server.arg(i) + "\n";
  }
  server.send(404, "text/plain", message);
}

void setup(void){

  pinMode(MOTOR_PIN_1, OUTPUT);     // Initialize the LED_BUILTIN pin as an output
  pinMode(MOTOR_PIN_2, OUTPUT);
  pinMode(MOTOR_PIN_3, OUTPUT);
  pinMode(MOTOR_PIN_4, OUTPUT);
  pinMode(MOTOR_PIN_5, OUTPUT);
  pinMode(MOTOR_PIN_6, OUTPUT);

  
  
  Serial.begin(115200);
  WiFi.begin("lawnmover","12345678");
  Serial.println("");

  // Wait for connection
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to ");
  Serial.println(ssid);
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

  if (MDNS.begin("esp8266")) {
    Serial.println("MDNS Responder Started");
  }

  server.on("/", handleRoot);

  server.on("/forward", [](){
    Serial.println("forward");
    digitalWrite(MOTOR_PIN_1, LOW);
    digitalWrite(MOTOR_PIN_2, HIGH);
   digitalWrite(MOTOR_PIN_3, HIGH);
    digitalWrite(MOTOR_PIN_4, LOW);
    
    server.send(200, "text/plain", "forward");
  });

  server.on("/driveStop", [](){
    Serial.println("driveStop");
    digitalWrite(MOTOR_PIN_1, LOW);
    digitalWrite(MOTOR_PIN_2, LOW);
     digitalWrite(MOTOR_PIN_3, LOW);
    digitalWrite(MOTOR_PIN_4, LOW);
    server.send(200, "text/plain", "driveStop");
  });

  server.on("/back", [](){
    Serial.println("back");
    digitalWrite(MOTOR_PIN_3, LOW);
    digitalWrite(MOTOR_PIN_4, HIGH);
    digitalWrite(MOTOR_PIN_2, LOW);
    digitalWrite(MOTOR_PIN_1, HIGH);
    server.send(200, "text/plain", "back");
  });

  server.on("/left", [](){
    Serial.println("right");
    analogWrite(MOTOR_PIN_1, 0);
    analogWrite(MOTOR_PIN_2, 1000);
    server.send(200, "text/plain", "right");
  });

  server.on("/right", [](){
    Serial.println("left");
    analogWrite(MOTOR_PIN_3, 1000);
    analogWrite(MOTOR_PIN_4,0);
    server.send(200, "text/plain", "left");
  });

  server.on("/steerStop", [](){
    Serial.println("steerStop");
    analogWrite(MOTOR_PIN_3, 0);
    analogWrite(MOTOR_PIN_4, 0);
    analogWrite(MOTOR_PIN_1, 0);
    analogWrite(MOTOR_PIN_2, 0);
    server.send(200, "text/plain", "steerStop");
  });
  server.on("/on", [](){
    Serial.println("on");
    digitalWrite(MOTOR_PIN_5,HIGH);
    digitalWrite(MOTOR_PIN_6,LOW);  
    server.send(200, "text/plain", "on");
  });
   server.on("/off", [](){
    Serial.println("off");
    digitalWrite(MOTOR_PIN_5,LOW);
    digitalWrite(MOTOR_PIN_6,LOW);  
    server.send(200, "text/plain", "off");
  });
  
   server.on("/hi", []()
   {
   });


  server.onNotFound(handleNotFound);

  server.begin();
  Serial.println("HTTP Server Started");
}

void loop(void){
  server.handleClient();

}